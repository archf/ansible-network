# vi: set ft=ruby

require 'rbconfig'

VAGRANTFILE_API_VERSION = '2'

ROLE_NAME = 'network'

hosts = [
  { name: 'm1', ip: '192.168.56.70', net: 'private_network', box: 'bento/centos-7.1'},
  { name: 'm2', ip: '192.168.56.80', net: 'private_network', box: 'ubuntu/trusty64' }
]

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  if Vagrant.has_plugin?("vagrant-hostmanager")
    config.hostmanager.enabled = true     # hook to Vagrant up and vagrant destroy
    config.hostmanager.manage_host = true # allow /etc/hosts file updating
    config.hostmanager.ignore_private_ip = false # disable using the private network IP address
    config.hostmanager.include_offline = true # include box that are up or boxes with private IP
  end

  # config loop to bring up all the machines and provision only once they are
  N=hosts.length

  (1..N).each do |machine_id|

    config.vm.define ROLE_NAME + "-m#{machine_id}" do |node|
      node.vm.box = hosts[machine_id - 1][:box]
      node.vm.hostname = ROLE_NAME + '-' + hosts[machine_id - 1][:name]
      node.vm.network hosts[machine_id -1 ][:net], ip: hosts[machine_id - 1][:ip]

      if machine_id == N
        # provisionnning loop
        node.vm.provision 'ansible' do |ansible|

          # create ansible groups to apply group_vars and host_vars
          ansible.groups = {
            "ntpd_servers" => [ROLE_NAME + '-' + hosts[0][:name], ROLE_NAME + '-' + hosts[1][:name]]
          }

          # run the provisionner
          ansible.verbose = 'v'
          ansible.limit = 'all'
          ansible.playbook = 'test.yml'         # Elaborate test that shows all features
        end #ansible vm.provision

      end # machine_id if node.vm

    end
  end # each loop
end #vagrant.configure
